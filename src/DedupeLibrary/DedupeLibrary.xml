<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DedupeLibrary</name>
    </assembly>
    <members>
        <member name="T:WatsonDedupe.Chunk">
            <summary>
            Represents a chunk of data identified during deduplication.
            </summary>
        </member>
        <member name="P:WatsonDedupe.Chunk.Key">
            <summary>
            The key of the chunk.
            </summary>
        </member>
        <member name="P:WatsonDedupe.Chunk.Length">
            <summary>
            The length of the chunk data.
            </summary>
        </member>
        <member name="P:WatsonDedupe.Chunk.Position">
            <summary>
            The order of the chunk within the current object.
            </summary>
        </member>
        <member name="P:WatsonDedupe.Chunk.Address">
            <summary>
            The address of the chunk within the current object.
            </summary>
        </member>
        <member name="P:WatsonDedupe.Chunk.Value">
            <summary>
            The byte data of the chunk.
            </summary>
        </member>
        <member name="M:WatsonDedupe.Chunk.#ctor">
            <summary>
            Instantiates the object.
            </summary>
        </member>
        <member name="M:WatsonDedupe.Chunk.#ctor(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>
            Instantiates the object.
            </summary>
            <param name="key">The key of the chunk.</param>
            <param name="len">The length of the chunk data.</param>
            <param name="pos">The order of the chunk within the object.</param>
            <param name="address">The address of the chunk within the current object.</param>
        </member>
        <member name="M:WatsonDedupe.Chunk.#ctor(System.String,System.Int64,System.Int64,System.Int64,System.Byte[])">
            <summary>
            Instantiates the object.
            </summary>
            <param name="key">The key of the chunk.</param>
            <param name="len">The length of the chunk data.</param>
            <param name="pos">The order of the chunk within the object.</param>
            <param name="address">The address of the chunk within the current object.</param>
            <param name="value">The byte data of the chunk.</param>
        </member>
        <member name="M:WatsonDedupe.Chunk.FromDataRow(System.Data.DataRow)">
            <summary>
            Converts a DataRow to a Chunk.
            </summary>
            <param name="row">The DataRow.</param>
            <returns>A populated Chunk.</returns>
        </member>
        <member name="T:WatsonDedupe.Database.DbProvider">
            <summary>
            External database provider.
            </summary>
        </member>
        <member name="M:WatsonDedupe.Database.DbProvider.IsInitialized">
            <summary>
            Method to indicate whether or not the database has been initialized.
            </summary>
            <returns>True if initialized.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.DbProvider.AddConfigValue(System.String,System.String)">
            <summary> 
            Add configuration-related data by key for deduplication operations.
            </summary>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
        </member>
        <member name="M:WatsonDedupe.Database.DbProvider.GetConfigValue(System.String)">
            <summary>
            Retrieve configuration-related data by key for deduplication operations.
            </summary>
            <param name="key">Key.</param> 
            <returns>Value.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.DbProvider.GetStatistics">
            <summary>
            Retrieve statistics for the index.
            </summary> 
            <returns>Index statistics.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.DbProvider.ListObjects(System.String,System.Int32,System.Int32)">
            <summary>
            List the objects stored in the index.
            </summary>
            <param name="prefix">Prefix upon which to match object keys.</param>
            <param name="indexStart">The index (DedupeObject.Id) from which to begin the enumeration.</param>
            <param name="maxResults">Maximum number of results to retrieve.</param>
            <return>Enumeration result.</return>
        </member>
        <member name="M:WatsonDedupe.Database.DbProvider.Exists(System.String)">
            <summary>
            Check if an object exists.
            </summary>
            <param name="key">Object key.</param>
            <returns>True if exists.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.DbProvider.GetObjectMetadata(System.String)">
            <summary>
            Retrieve metadata for an object by its key.
            DedupeObjectMap objects returned should be ordered in ascending order based on the chunk's position or address.
            </summary>
            <param name="key">Object key.</param>
            <returns>Object metadata.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.DbProvider.GetChunkMetadata(System.String)">
            <summary>
            Retrieve metadata for a given chunk by its key.
            </summary>
            <param name="chunkKey">Chunk key.</param>
            <returns>Chunk metadata.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.DbProvider.GetChunks(System.String)">
            <summary>
            Retrieve chunks associated with an object.
            </summary>
            <param name="key">Object key.</param>
            <returns>Chunks.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.DbProvider.GetObjectMapForPosition(System.String,System.Int64)">
            <summary>
            Retrieve the object map containing the metadata for a given address within the original object.
            </summary> 
            <param name="key">Object key.</param>
            <param name="position">Starting byte position.</param>
            <returns>Dedupe object map.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.DbProvider.GetObjectMap(System.String)">
            <summary>
            Retrieve the object map for a given object by key.
            </summary>
            <param name="key">Object key.</param>
            <returns>Object map entries.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.DbProvider.AddObject(System.String,System.Int64)">
            <summary>
            Add a new object to the index.
            </summary>
            <param name="key">Object key.</param>
            <param name="length">The total length of the object.</param>
        </member>
        <member name="M:WatsonDedupe.Database.DbProvider.AddObjectMap(System.String,System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            Add an object map to an existing object.
            </summary>
            <param name="key">Object key.</param>
            <param name="chunkKey">Chunk key.</param>
            <param name="chunkLength">Chunk length.</param>
            <param name="chunkPosition">Ordinal position of the chunk, i.e. 1, 2, ..., n.</param>
            <param name="chunkAddress">Byte address of the chunk within the original object.</param>
        </member>
        <member name="M:WatsonDedupe.Database.DbProvider.IncrementChunkRefcount(System.String,System.Int32)">
            <summary>
            Increment reference count for a chunk by its key.  If the chunk does not exist, it is created.
            </summary>
            <param name="chunkKey">Chunk key.</param>
            <param name="length">The chunk length, used when creating the chunk.</param>
        </member>
        <member name="M:WatsonDedupe.Database.DbProvider.Delete(System.String)">
            <summary>
            Delete an object and dereference the associated chunks.
            </summary>
            <param name="key">Object key.</param>
            <returns>List of chunk keys that should be garbage collected.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.DbProvider.DecrementChunkRefcount(System.String)">
            <summary>
            Decrement the reference count of a chunk by its key.  If the reference count reaches zero, the chunk is deleted.
            </summary>
            <param name="chunkKey">The chunk GUID.</param>
            <returns>Boolean indicating if the chunk should be garbage collected.</returns>
        </member>
        <member name="T:WatsonDedupe.Database.SqliteProvider">
            <summary>
            Built-in Sqlite provider for WatsonDedupe.
            </summary>
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.#ctor(System.String)">
            <summary>
            Instantiates the object
            </summary>
            <param name="indexFile">The index database file.</param>
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.IsInitialized">
            <summary>
            Check if the database is initialized.  With internal Sqlite databases, this will always return true, because the constructor initializes the database.
            </summary>
            <returns>True.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.AddConfigValue(System.String,System.String)">
            <summary>
            Add a configuration key-value pair.
            </summary>
            <param name="key">The key.</param>
            <param name="val">The value.</param>
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.GetConfigValue(System.String)">
            <summary>
            Retrieve a configuration value.
            </summary>
            <param name="key">The key.</param> 
            <returns>Value.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.GetStatistics">
            <summary>
            Retrieve index statistics.
            </summary> 
            <returns>Index statistics.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.ListObjects(System.String,System.Int32,System.Int32)">
            <summary>
            List the objects stored in the index.
            </summary>
            <param name="prefix">Prefix upon which to match object keys.</param>
            <param name="indexStart">The index (DedupeObject.Id) from which to begin the enumeration.</param>
            <param name="maxResults">Maximum number of results to retrieve.</param>
            <return>Enumeration result.</return>
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.Exists(System.String)">
            <summary>
            Determine if an object exists in the index.
            </summary>
            <param name="key">Object key.</param>
            <returns>True if the object exists.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.GetObjectMetadata(System.String)">
            <summary>
            Retrieve metadata for a given object.
            DedupeObjectMap objects returned should be ordered in ascending order based on the chunk's position or address.
            </summary>
            <param name="key">Object key.</param>
            <returns>Object metadata.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.GetChunkMetadata(System.String)">
            <summary>
            Retrieve metadata for a given chunk by its key.
            </summary>
            <param name="chunkKey">Chunk key.</param>
            <returns>Chunk metadata.</returns> 
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.GetChunks(System.String)">
            <summary>
            Retrieve chunk metadata for a given object.
            </summary>
            <param name="key">Object key.</param>
            <returns>Chunks associated with the object.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.GetObjectMapForPosition(System.String,System.Int64)">
            <summary>
            Retrieve the object map containing the metadata for a given address within the original object.
            </summary> 
            <param name="key">Object key.</param>
            <param name="position">Starting byte position.</param>
            <returns>Dedupe object map.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.GetObjectMap(System.String)">
            <summary>
            Retrieve the object map for a given object by key.
            </summary>
            <param name="key">Object key.</param>
            <returns>Object map entries.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.AddObject(System.String,System.Int64)">
            <summary>
            Add a new object to the index.
            </summary>
            <param name="key">Object key.</param>
            <param name="length">The total length of the object.</param> 
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.AddObjectMap(System.String,System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            Add an object map to an existing object.
            </summary>
            <param name="key">Object key.</param>
            <param name="chunkKey">Chunk key.</param>
            <param name="chunkLength">Chunk length.</param>
            <param name="chunkPosition">Ordinal position of the chunk, i.e. 1, 2, ..., n.</param>
            <param name="chunkAddress">Byte address of the chunk within the original object.</param>
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.IncrementChunkRefcount(System.String,System.Int32)">
            <summary>
            Increment reference count for a chunk by its key.  If the chunk does not exist, it is created.
            </summary>
            <param name="chunkKey">Chunk key.</param>
            <param name="length">The chunk length, used when creating the chunk.</param>
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.Delete(System.String)">
            <summary>
            Delete an object and dereference the associated chunks.
            </summary>
            <param name="key">Object key.</param>
            <returns>List of chunk keys that should be garbage collected.</returns>
        </member>
        <member name="M:WatsonDedupe.Database.SqliteProvider.DecrementChunkRefcount(System.String)">
            <summary>
            Decrement the reference count of a chunk by its key.  If the reference count reaches zero, the chunk is deleted.
            </summary>
            <param name="chunkKey">Chunk key.</param>
            <returns>Boolean indicating if the chunk should be garbage collected.</returns>
        </member>
        <member name="T:WatsonDedupe.DebugSettings">
            <summary>
            Debug settings.
            </summary>
        </member>
        <member name="F:WatsonDedupe.DebugSettings.Enabled">
            <summary>
            Enable debugging of dedupe operations.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DebugSettings.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="T:WatsonDedupe.DedupeCallbacks">
            <summary>
            Callback methods used to to read, write, or delete a chunk.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeCallbacks.WriteChunk">
            <summary>
            Write a chunk.  Your software should persist the chunk to storage.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeCallbacks.ReadChunk">
            <summary>
            Read a chunk.  Your software should retrieve the chunk data as a byte array using the string key supplied.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeCallbacks.DeleteChunk">
            <summary>
            Delete a chunk.  Your software should delete the chunk associated with the supplied string key.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DedupeCallbacks.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DedupeCallbacks.#ctor(System.Action{WatsonDedupe.DedupeChunk},System.Func{System.String,System.Byte[]},System.Action{System.String})">
            <summary>
            Instantiate the object.
            </summary>
            <param name="writeChunk">Function with no return value used to write a chunk.</param>
            <param name="readChunk">Function returning a byte[] used to read a chunk's data.</param>
            <param name="deleteChunk">Function with no return value used to delete a chunk.</param>
        </member>
        <member name="T:WatsonDedupe.DedupeChunk">
            <summary>
            Chunk identified in one or many deduplicated object.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeChunk.Id">
            <summary>
            Database ID.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeChunk.Key">
            <summary>
            Chunk key.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeChunk.Length">
            <summary>
            Length of the chunk.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeChunk.RefCount">
            <summary>
            Reference count for the chunk.
            </summary>
        </member>
        <member name="F:WatsonDedupe.DedupeChunk.Data">
            <summary>
            Chunk data.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DedupeChunk.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DedupeChunk.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="key">Chunk key.</param>
            <param name="length">Length of the chunk.</param>
            <param name="refCount">Reference count for the chunk.</param>
        </member>
        <member name="M:WatsonDedupe.DedupeChunk.#ctor(System.String,System.Int32,System.Int32,System.Byte[])">
            <summary>
            Instantiate the object.
            </summary>
            <param name="key">Chunk key.</param>
            <param name="length">Length of the chunk.</param>
            <param name="refCount">Reference count for the chunk.</param>
            <param name="data">Byte data.</param>
        </member>
        <member name="T:WatsonDedupe.DedupeCommon">
            <summary>
            Commonly-used static methods.
            </summary>
        </member>
        <member name="T:WatsonDedupe.DedupeConfig">
            <summary>
            Dedupe configuration setting
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeConfig.Id">
            <summary>
            Database ID.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeConfig.Key">
            <summary>
            Chunk key.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeConfig.Value">
            <summary>
            Length of the chunk.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeConfig.GUID">
            <summary>
            Config key-value pair GUID.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DedupeConfig.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DedupeConfig.#ctor(System.String,System.String)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="key">Key.</param>
            <param name="val">Value.</param>
        </member>
        <member name="T:WatsonDedupe.DedupeLibrary">
            <summary>
            Library for deduplication of objects.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeLibrary.Callbacks">
            <summary>
            Callback methods used by the dedupe library to read, write, and delete chunks.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeLibrary.Settings">
            <summary>
            Deduplication settings.
            </summary>
        </member>
        <member name="F:WatsonDedupe.DedupeLibrary.Logger">
            <summary>
            Method to invoke when sending log messages.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeLibrary.Database">
            <summary>
            Database provider.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.#ctor(System.String,WatsonDedupe.DedupeSettings,WatsonDedupe.DedupeCallbacks)">
            <summary>
            Initialize a new or existing index using an internal Sqlite database.
            </summary>
            <param name="indexFile">Path and filename.</param>
            <param name="settings">Deduplication settings.</param>
            <param name="callbacks">Object containing callback functions for writing, reading, and deleting chunks.</param>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.#ctor(WatsonDedupe.Database.DbProvider,WatsonDedupe.DedupeSettings,WatsonDedupe.DedupeCallbacks)">
            <summary>
            Initialize an existing index using an external database.  Tables must be created ahead of time.
            </summary>
            <param name="database">Database provider implemented using the Database.DbProvider class.</param>
            <param name="settings">Deduplication settings.</param>
            <param name="callbacks">Object containing callback functions for writing, reading, and deleting chunks.</param>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.Write(System.String,System.String)">
            <summary>
            Write an object to the deduplication index.
            </summary>
            <param name="key">The object key.  Must be unique in the index.</param>
            <param name="data">The string data for the object.</param> 
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.Write(System.String,System.Byte[])">
            <summary>
            Write an object to the deduplication index.
            </summary>
            <param name="key">The object key.  Must be unique in the index.</param>
            <param name="bytes">The byte data for the object.</param> 
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.Write(System.String,System.Int64,System.IO.Stream)">
            <summary>
            Write an object to the deduplication index.
            </summary>
            <param name="key">The object key.  Must be unique in the index.</param>
            <param name="contentLength">The length of the data.</param>
            <param name="stream">The stream containing the data.</param> 
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.Write(System.String,WatsonDedupe.DedupeCallbacks,System.String)">
            <summary>
            Write an object to the deduplication index.
            This method will use the callbacks supplied in the method signature.
            </summary>
            <param name="key">The object key.  Must be unique in the index.</param>
            <param name="callbacks">CallbackMethods object containing callback methods.</param>
            <param name="data">The string data for the object.</param> 
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.Write(System.String,WatsonDedupe.DedupeCallbacks,System.Byte[])">
            <summary>
            Write an object to the deduplication index.
            This method will use the callbacks supplied in the method signature.
            </summary>
            <param name="key">The object key.  Must be unique in the index.</param>
            <param name="callbacks">CallbackMethods object containing callback methods.</param>
            <param name="bytes">The byte data for the object.</param> 
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.Write(System.String,WatsonDedupe.DedupeCallbacks,System.Int64,System.IO.Stream)">
            <summary>
            Write an object to the deduplication index.
            This method will use the callbacks supplied in the method signature.
            </summary>
            <param name="key">The object key.  Must be unique in the index.</param>
            <param name="callbacks">CallbackMethods object containing callback methods.</param>
            <param name="contentLength">The length of the data.</param>
            <param name="stream">The stream containing the data.</param> 
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.WriteOrReplace(System.String,System.Byte[])">
            <summary>
            Write an object to the deduplication index if it doesn't already exist, or, replace the object if it does.
            </summary>
            <param name="key">The object key.  Must be unique in the index.</param>
            <param name="data">The byte data for the object.</param> 
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.WriteOrReplace(System.String,System.Int64,System.IO.Stream)">
            <summary>
            Write an object to the deduplication index if it doesn't already exist, or, replace the object if it does.
            </summary>
            <param name="key">The object key.  Must be unique in the index.</param>
            <param name="contentLength">The length of the data.</param>
            <param name="stream">The stream containing the data.</param> 
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.WriteOrReplace(System.String,WatsonDedupe.DedupeCallbacks,System.Byte[])">
            <summary>
            Write an object to the deduplication index if it doesn't already exist, or, replace the object if it does.
            This method will use the callbacks supplied in the method signature.
            </summary>
            <param name="key">The object key.  Must be unique in the index.</param>
            <param name="callbacks">CallbackMethods object containing callback methods.</param>
            <param name="data">The byte data for the object.</param> 
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.WriteOrReplace(System.String,WatsonDedupe.DedupeCallbacks,System.Int64,System.IO.Stream)">
            <summary>
            Write an object to the deduplication index if it doesn't already exist, or, replace the object if it does.
            This method will use the callbacks supplied in the method signature.
            </summary>
            <param name="key">The object key.  Must be unique in the index.</param>
            <param name="callbacks">CallbackMethods object containing callback methods.</param>
            <param name="contentLength">The length of the data.</param>
            <param name="stream">The stream containing the data.</param> 
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.GetMetadata(System.String)">
            <summary>
            Retrieve metadata about an object from the deduplication index.
            </summary>
            <param name="key">The object key.</param>
            <returns>Object metadata.</returns>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.Get(System.String)">
            <summary>
            Retrieve an object from the deduplication index.
            </summary>
            <param name="key">The object key.</param>
            <returns>Object data.</returns>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.TryGet(System.String,WatsonDedupe.DedupeObject@)">
            <summary>
            Retrieve an object from the deduplication index.
            </summary>
            <param name="key">The object key.</param>
            <param name="data">Object data.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.Get(System.String,WatsonDedupe.DedupeCallbacks)">
            <summary>
            Retrieve an object from the deduplication index.
            This method will use the callbacks supplied in the method signature.
            </summary>
            <param name="key">The object key.</param>
            <param name="callbacks">CallbackMethods object containing callback methods.</param>
            <returns>Object data.</returns>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.GetStream(System.String)">
            <summary>
            Retrieve a read-only stream over an object that has been stored.
            </summary>
            <param name="key">The object key.</param>
            <returns>Read-only stream.</returns>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.GetStream(System.String,WatsonDedupe.DedupeCallbacks)">
            <summary>
            Retrieve a read-only stream over an object that has been stored.
            </summary>
            <param name="key">The object key.</param>
            <param name="callbacks">CallbackMethods object containing callback methods.</param>
            <returns>Read-only stream.</returns>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.TryGetStream(System.String,WatsonDedupe.DedupeStream@)">
            <summary>
            Retrieve a read-only stream over an object that has been stored.
            </summary>
            <param name="key">The object key.</param>
            <param name="data">Read-only stream.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.TryGetStream(System.String,WatsonDedupe.DedupeCallbacks,WatsonDedupe.DedupeStream@)">
            <summary>
            Retrieve a read-only stream over an object that has been stored.
            </summary>
            <param name="key">The object key.</param>
            <param name="callbacks">CallbackMethods object containing callback methods.</param>
            <param name="data">Read-only stream.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.Delete(System.String)">
            <summary>
            Delete an object stored in the deduplication index.
            </summary>
            <param name="key">The object key.</param>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.Delete(System.String,WatsonDedupe.DedupeCallbacks)">
            <summary>
            Delete an object stored in the deduplication index.
            This method will use the callbacks supplied in the method signature.
            </summary>
            <param name="key">The object key.</param>
            <param name="callbacks">CallbackMethods object containing callback methods.</param>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.ListObjects">
            <summary>
            List the object keys stored in the deduplication index.
            </summary>
            <returns>Enumeration result.</returns>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.ListObjects(System.String)">
            <summary>
            List the object keys stored in the deduplication index.
            </summary>
            <returns>Enumeration result.</returns>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.ListObjects(System.String,System.Int32,System.Int32)">
            <summary>
            List the object keys stored in the deduplication index.
            </summary>
            <returns>Enumeration result.</returns>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.Exists(System.String)">
            <summary>
            Determine if an object exists in the index.
            </summary>
            <param name="key">The object key.</param>
            <returns>Boolean indicating if the object exists.</returns>
        </member>
        <member name="M:WatsonDedupe.DedupeLibrary.IndexStats">
            <summary>
            Retrieve deduplication index statistics.
            </summary>
            <returns>Index statistics.</returns>
        </member>
        <member name="T:WatsonDedupe.DedupeObject">
            <summary>
            Deduplicated object stored in the index.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeObject.Id">
            <summary>
            Database ID.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeObject.Key">
            <summary>
            Object key.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeObject.Length">
            <summary>
            Length of the object.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeObject.CreatedUtc">
            <summary>
            Creation timestamp in UTC time.
            </summary>
        </member>
        <member name="F:WatsonDedupe.DedupeObject.Chunks">
            <summary>
            List of chunks that comprise the object.
            </summary>
        </member>
        <member name="F:WatsonDedupe.DedupeObject.ObjectMap">
            <summary>
            Object map indicating chunk positions.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DedupeObject.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DedupeObject.#ctor(System.String,System.Int64)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="key">Object key.</param>
            <param name="length">Object length.</param>
        </member>
        <member name="P:WatsonDedupe.DedupeObject.Data">
            <summary>
            Data from the object.  Using this property will fully read the stream.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeObject.DataStream">
            <summary>
            Stream containing data from the object.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DedupeObject.ToString">
            <summary>
            Human-readable string version of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WatsonDedupe.DedupeObjectMap">
            <summary>
            Object that maps a dedupe chunk to a range within a deduplicated object.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeObjectMap.Id">
            <summary>
            Database ID.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeObjectMap.ObjectKey">
            <summary>
            Object key.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeObjectMap.ChunkKey">
            <summary>
            Chunk key.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeObjectMap.ChunkLength">
            <summary>
            Chunk length.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeObjectMap.ChunkPosition">
            <summary>
            The ordinal position of the chunk.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeObjectMap.ChunkAddress">
            <summary>
            The byte position of the chunk within the original object.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DedupeObjectMap.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DedupeObjectMap.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int64)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="objKey">Object key.</param>
            <param name="chunkKey">Chunk key.</param>
            <param name="chunkLength">Chunk length.</param>
            <param name="chunkPosition">The ordinal position of the chunk.</param>
            <param name="chunkAddress">The byte position of the chunk within the original object.</param>
        </member>
        <member name="T:WatsonDedupe.DedupeSettings">
            <summary>
            Settings that dictate how deduplication operates internally.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeSettings.MinChunkSize">
            <summary>
            The minimum amount of data that can be considered an independent chunk of data upon which to identify duplicates.
            With smaller values, the probability of finding redundancy increases, but comes at the cost of processing time and computation.
            With larger values, processing times are faster, but less redundancy is identified.
            Use smaller values when attempting to deduplicate within a file and larger values when deduplicating across files.
            This value must be a positive integer evenly divisible by 64, and must be at least 256.
            Default is 1024.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeSettings.MaxChunkSize">
            <summary>
            The maximum amount of data that can be considered an independent chunk of data upon which to identify duplicates.
            With smaller values, the probability of finding redundancy increases, but comes at the cost of processing time and computation.
            With larger values, processing times are faster, but less redundancy is identified.
            Use smaller values when attempting to deduplicate within a file and larger values when deduplicating across files.
            This value must be greater than the minimum chunk size and no larger than 8 times the minimum chunk size.
            This value must be a positive integer evenly divisible by 64, and must be at least 2048.
            Default is 32768.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeSettings.ShiftCount">
            <summary>
            The number of bytes to shift to mathematically re-evaluate content in the sliding window for a chunk boundary.
            With smaller values, more chunk boundaries will be detected at the cost of processing time and computation.
            This value must be less than the minimum chunk size.
            It is recommended that this value be approximately 1/32 the size of the minimum chunk size.
            Default is 32.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeSettings.BoundaryCheckBytes">
            <summary>
            The number of bytes to evaluate at the end of the sliding window to determine if a chunk boundary has been identified.
            With smaller values, it is more likely that chunks will be identified.
            With larger values, it is less likely that chunks will be identified.
            Use smaller values (i.e. 1) when working with documents, and larger values (i.e. 3 or 4) when working with large blocks of data.
            This value must be a positive integer between 1 and 4.
            Default is 2.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DedupeSettings.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DedupeSettings.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Instantiate the object.
            </summary>
            <param name="minChunkSize"></param>
            <param name="maxChunkSize"></param>
            <param name="shiftCount"></param>
            <param name="boundaryCheckBytes"></param>
        </member>
        <member name="T:WatsonDedupe.DedupeStream">
            <summary>
            A read-only stream over a deduplicated object.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeStream.CanRead">
            <summary>
            Indicates if the stream allows read operations.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeStream.CanSeek">
            <summary>
            Indicates if the stream allows seek operations.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeStream.CanWrite">
            <summary>
            Indicates if the stream allows write operations.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeStream.Length">
            <summary>
            Indicates the length of the content contained within the stream.
            </summary>
        </member>
        <member name="P:WatsonDedupe.DedupeStream.Position">
            <summary>
            Indicates the current position within the stream.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DedupeStream.Flush">
            <summary>
            Not supported.  This method will throw a NotSupportedException.
            </summary>
        </member>
        <member name="M:WatsonDedupe.DedupeStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read data from the stream into the specified buffer and increment the stream position.
            </summary>
            <param name="buffer">Byte array to use as a buffer.</param>
            <param name="offset">The offset within the buffer indicating where to copy the read data.</param>
            <param name="count">The number of bytes to populate within the buffer.</param>
            <returns>An integer representing the number of bytes read.</returns>
        </member>
        <member name="M:WatsonDedupe.DedupeStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seek to the specified position within the stream.
            </summary>
            <param name="offset">Offset.</param>
            <param name="origin">SeekOrigin.</param>
            <returns>New position.</returns>
        </member>
        <member name="M:WatsonDedupe.DedupeStream.SetLength(System.Int64)">
            <summary>
            Not supported.  This method will throw a NotSupportedException.
            Set the length of the stream.
            </summary>
            <param name="value">Length.</param>
        </member>
        <member name="M:WatsonDedupe.DedupeStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not supported.  This method will throw a NotSupportedException.
            </summary>
            <param name="buffer">Byte array.</param>
            <param name="offset">Offset.</param>
            <param name="count">Number of bytes.</param>
        </member>
        <member name="T:WatsonDedupe.EnumerationResult">
            <summary>
            Enumeration result.
            </summary>
        </member>
        <member name="F:WatsonDedupe.EnumerationResult.Prefix">
            <summary>
            Prefix.
            </summary>
        </member>
        <member name="P:WatsonDedupe.EnumerationResult.IndexStart">
            <summary>
            Index from which the enumeration should begin.
            </summary>
        </member>
        <member name="P:WatsonDedupe.EnumerationResult.NextIndexStart">
            <summary>
            IndexStart value that should be used to continue enumeration.
            </summary>
        </member>
        <member name="P:WatsonDedupe.EnumerationResult.MaxResults">
            <summary>
            Maximum number of results requested.
            </summary>
        </member>
        <member name="F:WatsonDedupe.EnumerationResult.Objects">
            <summary>
            List of object metadata.
            </summary>
        </member>
        <member name="M:WatsonDedupe.EnumerationResult.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{WatsonDedupe.DedupeObject})">
            <summary>
            Instantiate the object.
            </summary>
            <param name="prefix">Prefix.</param>
            <param name="indexStart">Continuation token supplied in this enumeration query.</param>
            <param name="nextIndexStart">Continuation token that should be used to continue the enumeration.</param>
            <param name="maxResults">Maximum number of results requested.</param>
            <param name="objects">List of object metadata.</param>
        </member>
        <member name="M:WatsonDedupe.EnumerationResult.ToString">
            <summary>
            Human-readable string version of the object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WatsonDedupe.EnumerationResult.ToTabularString">
            <summary>
            Human-readable string version of the object with tabular output for objects.
            </summary>
            <returns></returns>
        </member>
        <member name="T:WatsonDedupe.IndexStatistics">
            <summary>
            Deduplication index statistics.
            </summary>
        </member>
        <member name="P:WatsonDedupe.IndexStatistics.Objects">
            <summary>
            The number of objects stored in the index.
            </summary>
        </member>
        <member name="P:WatsonDedupe.IndexStatistics.Chunks">
            <summary>
            The number of chunks stored in the index.
            </summary>
        </member>
        <member name="P:WatsonDedupe.IndexStatistics.LogicalBytes">
            <summary>
            The amount of data stored in the index, i.e. a sum of the content length of all objects.
            </summary>
        </member>
        <member name="P:WatsonDedupe.IndexStatistics.PhysicalBytes">
            <summary>
            The physical data stored as chunks in support of index objects, i.e. the amount of deduplicated data.
            </summary>
        </member>
        <member name="P:WatsonDedupe.IndexStatistics.RatioX">
            <summary>
            The deduplication ratio represented as a multiplier, i.e. 3X deduplication means 3MB of logical data (objects) has been reduced to 1MB of physical data (chunks).
            </summary>
        </member>
        <member name="P:WatsonDedupe.IndexStatistics.RatioPercent">
            <summary>
            The deduplication ratio represented as a percentage, i.e. 50% deduplication means 10MB of logical data (objects) has been reduced to 5MB of physical data (chunks).
            </summary>
        </member>
        <member name="M:WatsonDedupe.IndexStatistics.#ctor">
            <summary>
            Instantiate the object.
            </summary>
        </member>
        <member name="M:WatsonDedupe.IndexStatistics.ToString">
            <summary>
            Human-readable version of the object.
            </summary>
            <returns></returns>
        </member>
    </members>
</doc>
